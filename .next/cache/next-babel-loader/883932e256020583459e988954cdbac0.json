{"ast":null,"code":"var _jsxFileName = \"/Users/hsyun/programming/web/full_project/doctor-MBTI/pages/test.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useDispatch } from \"react-redux\";\nimport { ADD_ANSWER } from \"../reducers/answer\";\nimport Question from \"../components/Question\";\nimport ProgressBar from \"../components/ProgressBar\";\nimport list from \"../assets/list.json\";\n\nconst Test = () => {\n  const router = useRouter();\n  const dispatch = useDispatch();\n  const maxCount = list.arr.length;\n  const {\n    0: answerArr,\n    1: setAnswerArr\n  } = useState([]);\n  const {\n    0: index,\n    1: setIndex\n  } = useState(1);\n\n  const handler = ans => {\n    setAnswerArr(prevArr => [...prevArr, ans]);\n\n    if (index === maxCount) {\n      router.push(\"/loading\");\n      return;\n    }\n\n    setIndex(index + 1);\n  };\n\n  useEffect(() => {\n    if (answerArr.length === maxCount) {\n      console.log(\"AnswerArr is: \" + answerArr);\n      dispatch({\n        type: ADD_ANSWER,\n        data: answerArr\n      });\n    }\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 3\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }\n  }, __jsx(Question, {\n    index: index,\n    handler: handler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  })), __jsx(ProgressBar, {\n    i: index,\n    length: maxCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }\n  }));\n};\n\nexport default Test;","map":{"version":3,"sources":["/Users/hsyun/programming/web/full_project/doctor-MBTI/pages/test.js"],"names":["React","useEffect","useState","useRouter","useDispatch","ADD_ANSWER","Question","ProgressBar","list","Test","router","dispatch","maxCount","arr","length","answerArr","setAnswerArr","index","setIndex","handler","ans","prevArr","push","console","log","type","data"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,UAAT,QAA2B,oBAA3B;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAClB,QAAMC,MAAM,GAAGP,SAAS,EAAxB;AACA,QAAMQ,QAAQ,GAAGP,WAAW,EAA5B;AAEA,QAAMQ,QAAQ,GAAGJ,IAAI,CAACK,GAAL,CAASC,MAA1B;AACA,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4Bd,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM;AAAA,OAACe,KAAD;AAAA,OAAQC;AAAR,MAAoBhB,QAAQ,CAAC,CAAD,CAAlC;;AAEA,QAAMiB,OAAO,GAAIC,GAAD,IAAS;AACxBJ,IAAAA,YAAY,CAAEK,OAAD,IAAa,CAAC,GAAGA,OAAJ,EAAaD,GAAb,CAAd,CAAZ;;AAEA,QAAIH,KAAK,KAAKL,QAAd,EAAwB;AACvBF,MAAAA,MAAM,CAACY,IAAP,CAAY,UAAZ;AACA;AACA;;AACDJ,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACA,GARD;;AAUAhB,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIc,SAAS,CAACD,MAAV,KAAqBF,QAAzB,EAAmC;AAClCW,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBT,SAA/B;AACAJ,MAAAA,QAAQ,CAAC;AACRc,QAAAA,IAAI,EAAEpB,UADE;AAERqB,QAAAA,IAAI,EAAEX;AAFE,OAAD,CAAR;AAIA;AACD,GARQ,CAAT;AAUA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEE,KAAjB;AAAwB,IAAA,OAAO,EAAEE,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADD,EAKC,MAAC,WAAD;AAAa,IAAA,CAAC,EAAEF,KAAhB;AAAuB,IAAA,MAAM,EAAEL,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALD,CADD;AASA,CArCD;;AAuCA,eAAeH,IAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useDispatch } from \"react-redux\";\n\nimport { ADD_ANSWER } from \"../reducers/answer\";\nimport Question from \"../components/Question\";\nimport ProgressBar from \"../components/ProgressBar\";\nimport list from \"../assets/list.json\";\n\nconst Test = () => {\n\tconst router = useRouter();\n\tconst dispatch = useDispatch();\n\n\tconst maxCount = list.arr.length;\n\tconst [answerArr, setAnswerArr] = useState([]);\n\tconst [index, setIndex] = useState(1);\n\n\tconst handler = (ans) => {\n\t\tsetAnswerArr((prevArr) => [...prevArr, ans]);\n\n\t\tif (index === maxCount) {\n\t\t\trouter.push(\"/loading\");\n\t\t\treturn;\n\t\t}\n\t\tsetIndex(index + 1);\n\t};\n\n\tuseEffect(() => {\n\t\tif (answerArr.length === maxCount) {\n\t\t\tconsole.log(\"AnswerArr is: \" + answerArr);\n\t\t\tdispatch({\n\t\t\t\ttype: ADD_ANSWER,\n\t\t\t\tdata: answerArr,\n\t\t\t});\n\t\t}\n\t});\n\n\treturn (\n\t\t<div>\n\t\t\t<div>\n\t\t\t\t<Question index={index} handler={handler} />\n\t\t\t</div>\n\n\t\t\t<ProgressBar i={index} length={maxCount} />\n\t\t</div>\n\t);\n};\n\nexport default Test;\n"]},"metadata":{},"sourceType":"module"}