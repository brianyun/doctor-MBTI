{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const initialState = {\n  ans: [],\n  url: {\n    screenshotUrl: \"\",\n    thumbUrl: \"\"\n  }\n};\nexport const ADD_ANSWER = \"ADD_ANSWER\";\nexport const ADD_URL = \"ADD_URL\";\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_ANSWER:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          ans: action.data\n        });\n      }\n\n    case ADD_URL:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          url: action.data\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/hsyun/programming/web/full_project/doctor-MBTI/reducers/answer.js"],"names":["initialState","ans","url","screenshotUrl","thumbUrl","ADD_ANSWER","ADD_URL","reducer","state","action","type","data"],"mappings":";;;;;;AAAA,OAAO,MAAMA,YAAY,GAAG;AAC3BC,EAAAA,GAAG,EAAE,EADsB;AAE3BC,EAAAA,GAAG,EAAE;AACJC,IAAAA,aAAa,EAAE,EADX;AAEJC,IAAAA,QAAQ,EAAE;AAFN;AAFsB,CAArB;AAQP,OAAO,MAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,MAAMC,OAAO,GAAG,SAAhB;;AAEP,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AACjD,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKL,UAAL;AAAiB;AAChB,+CACIG,KADJ;AAECP,UAAAA,GAAG,EAAEQ,MAAM,CAACE;AAFb;AAIA;;AACD,SAAKL,OAAL;AAAc;AACb,+CACIE,KADJ;AAECN,UAAAA,GAAG,EAAEO,MAAM,CAACE;AAFb;AAIA;;AACD;AAAS;AACR,iCACIH,KADJ;AAGA;AAjBF;AAmBA,CApBD;;AAsBA,eAAeD,OAAf","sourcesContent":["export const initialState = {\n\tans: [],\n\turl: {\n\t\tscreenshotUrl: \"\",\n\t\tthumbUrl: \"\",\n\t},\n};\n\nexport const ADD_ANSWER = \"ADD_ANSWER\";\nexport const ADD_URL = \"ADD_URL\";\n\nconst reducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase ADD_ANSWER: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tans: action.data,\n\t\t\t};\n\t\t}\n\t\tcase ADD_URL: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\turl: action.data,\n\t\t\t};\n\t\t}\n\t\tdefault: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t};\n\t\t}\n\t}\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}