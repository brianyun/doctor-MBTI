{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var initialState = {\n  ans: []\n};\nexport var ADD_ANSWER = \"ADD_ANSWER\";\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_ANSWER:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          ans: action.data\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/hsyun/programming/web/full_project/doctor-MBTI/reducers/answer.js"],"names":["initialState","ans","ADD_ANSWER","reducer","state","action","type","data"],"mappings":";;;;;;AAAA,OAAO,IAAMA,YAAY,GAAG;AAC3BC,EAAAA,GAAG,EAAE;AADsB,CAArB;AAIP,OAAO,IAAMC,UAAU,GAAG,YAAnB;;AAEP,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AACjD,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKJ,UAAL;AAAiB;AAChB,+CACIE,KADJ;AAECH,UAAAA,GAAG,EAAEI,MAAM,CAACE;AAFb;AAIA;;AACD;AAAS;AACR,iCACIH,KADJ;AAGA;AAXF;AAaA,CAdD;;AAgBA,eAAeD,OAAf","sourcesContent":["export const initialState = {\n\tans: [],\n};\n\nexport const ADD_ANSWER = \"ADD_ANSWER\";\n\nconst reducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase ADD_ANSWER: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tans: action.data,\n\t\t\t};\n\t\t}\n\t\tdefault: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t};\n\t\t}\n\t}\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}